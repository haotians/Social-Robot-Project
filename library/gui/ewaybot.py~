#!/usr/bin/env python# -*- coding:utf-8 -*-# # Add W A S D and armZ support# 2015.10.13from socketIO_client import SocketIOfrom socketIO_client import LoggingNamespace as lognamespacefrom ewaybot_vision import Basicclass RobotControl(Basic.BasicData):    def __init__(self):        # init father        Basic.BasicData.__init__(self)        self.arm_control_xy = {            'W': self._button_arm_upward,            'A': self._button_arm_turn_left,            'S': self._button_arm_downward,            'D': self._button_arm_turn_right,            'STOP': self._button_arm_stop,        }        self.arm_built_in_action = {            'INIT': self._button_arm_init,            'SWING': self._button_arm_swing,            'WAVE': self._button_arm_wave,            'STOP': self._button_arm_init2,        }        self.camControl = {            'ON': self._ui_vision_on,            'OFF': self._cam_off,        }        self.audControl = {            'ON': self._aud_on,            'OFF': self._aud_off,        }        self.recordControl = {            'ON':self._record_on,        }        self.z_pos = 50    # =============================================================================    def on_move(self, *args):        """        move logic here, determine which direction and what speed to move in by params speed and angle        """        speed = args[0]["movSpeed"]        angle = args[0]["movAngle"]        self.data_wheels = [0, 0, 0, 0, 0, 0]        self.data_flag = False        if 0 <= angle <= 45 or 315 < angle <= 360:            # self.data_wheels = self._button_forward(speed, angle)            self.wheel_forward(6000,120,0)            # print "move forward"        elif 45 < angle <= 135:            self.wheel_turnright(6000)            # print "turn right"        elif 135 < angle <= 225:            self.wheel_backward(6000)            # print "move backward"        else:            self.wheel_turnleft(6000)            # print "turn left"        print(speed, angle)    # def _button_forward(self, *args):    #     """    #         if robot is going forward now, accelerate; deceleration otherwise;    #     """    #     return [60, 150, 3, 60, 150, 3]    def button_stop(self, *args):        """        speed deceleration to zero        """        print "wheel stop"        self.wheel_stop()        # self.data_flag = False    # =============================================================================    # arm interface    def arm_built_in(self, *args):        self.arm_built_in_action[args[0]]()    def _button_arm_init(self):        """            init gesture        """        # self.data_arms = [1, 0, 0, 0, 0, 0, 0]        # self.data_flag = True        self.arm_build_in(1)        print "init position 1"    def _button_arm_swing(self):        """            swing gesture        """        self.arm_build_in(3)        print "swing"    def _button_arm_wave(self):        """            wave gesture        """        self.arm_build_in(4)        print "wave"    def _button_arm_init2(self):        """            stop current gesture        """        self.arm_build_in(5)        # self.command_flag = False        print "Init position 2"    def arm_control(self, *args):        self.arm_control_xy[args[0]]()    def arm_control_z(self, *args):        if args[0] > self.z_pos:            self.z_pos = args[0]            self.data_arms = [2, 0, 1, 0, 0, 1, 0]            print "arm forward"            self.data_flag = True        elif args[0] < self.z_pos:            self.z_pos = args[0]            self.data_arms = [2, 0, -1, 0, 0, -1, 0]            print "arm backward"            self.data_flag = True        else:            pass        print('armZ pos: ' + args[0])    def _button_arm_upward(self):        self.data_arms = [2, 0, 0, 1, 0, 0, 1]        self.data_flag = True        print 'arm upward'    def _button_arm_downward(self):        self.data_arms = [2, 0, 0, -1, 0, 0, -1]        self.data_flag = True        print "arm downward"    def _button_arm_turn_left(self):        self.data_arms = [2, -1, 0, 0, -1, 0, 0]        self.data_flag = True        print('arm turn left')    def _button_arm_turn_right(self):        self.data_arms = [2, 1, 0, 0, 1, 0, 0]        self.data_flag = True        print('arm turn right')         # def button_arm_updown(self, *args):    #     print(args[0])    #    def _button_arm_stop(self):        print('arm stop')    # =============================================================================    #  auto navigation interface    def move_target(self, *args):        print(args[0]["x"], args[0]["y"])    # =============================================================================    #  command line interface    def execute_cmd(self, *args):        command = args[0]        print('command: ' + command)        if command == "ui vision start":            self.camera_on_ui()        elif command == "vision start":            self.camera_on_ui_local()        elif command == "vision end":            self.camera_off()        elif command == "local vision start":            self.camera_on_local()        print "data_control: ", self.data_control    # =============================================================================    # camera interface    def cam_control(self, *args):        self.camControl[args[0]]()    def _ui_vision_on(self):        self.camera_on_ui()        print('Local Camera ON')    def _cam_off(self):        self.camera_off()        print('Camera OFF')    def aud_control(self, *args):        self.audControl[args[0]]()    def _aud_on(self):        self.voice_on()        print('Audio ON')    def _aud_off(self):        self.voice_off()        print('Audio OFF')     def record_control(self, *args):        self.recordControl[args[0]]()    def _record_on(self):        self.record_on()        print('Record Start')    def start_ui_system(self, *args):        server_in = args[0]        port_in = args[1]        socketIO = SocketIO(server_in, port_in, lognamespace)        socketIO.on('cam', self.cam_control)        socketIO.on('armXY', self.arm_control)        socketIO.on('armZ', self.arm_control_z)        socketIO.on('armBI', self.arm_built_in)        socketIO.on('move', self.on_move)        socketIO.on('stop', self.button_stop)        socketIO.on('movtarget', self.move_target)        socketIO.on('botcmd', self.execute_cmd)        socketIO.on('aud', self.aud_control)        socketIO.on('record', self.record_control)        socketIO.wait()if __name__ == '__main__':    robot_ui = RobotControl()    server = 'localhost'    port = 28426    socketIO_test = SocketIO(server, port, lognamespace)    socketIO_test.on('armXY', robot_ui.arm_control)    socketIO_test.on('armZ', robot_ui.arm_control_z)    socketIO_test.on('cam', robot_ui.cam_control)    socketIO_test.on('armBI', robot_ui.arm_built_in)    socketIO_test.on('move', robot_ui.on_move)    socketIO_test.on('stop', robot_ui.button_stop)    socketIO_test.on('movtarget', robot_ui.move_target)    socketIO_test.on('botcmd', robot_ui.execute_cmd)    socketIO_test.on('aud', robot_ui.aud_control)    socketIO_test.on('record', robot_ui.record_conrtol)    socketIO_test.wait()