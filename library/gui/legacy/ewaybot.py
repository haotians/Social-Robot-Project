#!/usr/bin/env python# -*- coding:utf-8 -*-# # Add W A S D and armZ support# 2015.10.13from socketIO_client import SocketIOfrom socketIO_client import LoggingNamespace as lognamespacefrom legacy import Basicclass RobotControl(Basic.BasicCommand):    def __init__(self):        # init father        Basic.BasicCommand.__init__(self)        self.arm_control_xy = {            'W': self._button_arm_upward,            'A': self._button_arm_turn_left,            'S': self._button_arm_downward,            'D': self._button_arm_turn_right,            'STOP': self._button_arm_stop,        }        self.arm_built_in_action = {            'INIT': self._button_arm_init,            'SWING': self._button_arm_swing,            'WAVE': self._button_arm_wave,            'STOP': self._button_arm_init2,        }        self.camControl = {            'ON': self._ui_vision_on,            'OFF': self._cam_off,        }        self.audControl = {            'ONWeb': self._aud_on_web,            'ONLocal': self._aud_on_local,            # for debug            'ON': self._aud_on_local,            'OFF': self._aud_off,        }        self.recordControl = {            'START':self._record_on,            'STOP':self._record_off,        }        self.MusicControl = {            'You are my Sunshine':self._Music_one,            'Come on':self._Music_two,            'hello world':self._Music_three,        }        self.resetControl = {            'RESET':self._reset_on,        }        self.handControl = {            'Left':self._hand_left,            'Right':self._hand_right,            'Both':self._hand_both,        }        # self.z_pos = 50        self.z_pos = None    # =============================================================================    def on_move(self, *args):        """        move logic here, determine which direction and what speed to move in by params speed and angle        """        angle = args[0]["movAngle"]        speed = args[0]["movSpeed"]        self.data_wheels = [0, angle, speed, 0, 0]        self.data_flag = True        print(self.data_wheels)        socketIO_test.emit('message', str((speed, angle)))    # def _button_forward(self, *args):    #     """    #         if robot is going forward now, accelerate; deceleration otherwise;    #     """    #     return [60, 150, 3, 60, 150, 3]    def button_stop(self, *args):        """        speed deceleration to zero        """        print "wheel stop"        self.wheel_stop()        # self.data_flag = False    # =============================================================================    # arm interface    # record control    def record_control(self, *args):        self.recordControl[args[0]]()    def _record_on(self):        # self.record_Start()        print('Record Start')    def _record_off(self):        # self.record_stop()        print('Record Stop')    #reset    def reset_control(self, *args):        self.resetControl[args[0]]()    def _reset_on(self):        # self.record_Start()        print('Reset')    #hand control    def hand_control(self, *args):        self.handControl[args[0]]()    def _hand_left(self):        print('Left Hand')    def _hand_right(self):        print('Right hand')    def _hand_both(self):        print('Both Hands')     #  music control    def Music_control(self, *args):        self.MusicControl[args[0]]()    def _Music_one(self):        print('You are my Sunshine')    def _Music_two(self):        print('Come on')    def _Music_three(self):        print('hello world')         #friend name    def name_control(self, *args):        print(args[0])    def arm_built_in(self, *args):        self.arm_built_in_action[args[0]]()    # =============================================================================    def _button_arm_init(self):        """            arm_init_work        """        self.arm_init_work()        print "init position 1"    def _button_arm_swing(self):        """            swing gesture        """        # self.arm_build_in(2)        self.arm_move_non_music("swing")        print "swing"    def _button_arm_wave(self):        """            wave gesture        """        self.arm_move_non_music("wave")        print "wave"    def _button_arm_init2(self):        """            arm_init_shutdown        """        self.arm_init_shutdown()        print "Init position 2"    def arm_control(self, *args):        self.arm_control_xy[args[0]]()    def arm_control_z(self, *args):        # if args[0] > self.z_pos:        if args[0] == "In":            self.z_pos = args[0]            self.data_arms = [0, 0, 1, 0, 0, 1, 0]            print "arm forward"            self.data_flag = True        # elif args[0] < self.z_pos:        elif args[0] == "Out":            self.z_pos = args[0]            self.data_arms = [0, 0, -1, 0, 0, -1, 0]            print "arm backward"            self.data_flag = True        else:            pass        print('armZ pos: ' + args[0])    def _button_arm_upward(self):        self.data_arms = [0, 0, 0, 1, 0, 0, 1]        self.data_flag = True        print 'arm upward'    def _button_arm_downward(self):        self.data_arms = [0, 0, 0, -1, 0, 0, -1]        self.data_flag = True        print "arm downward"    def _button_arm_turn_left(self):        self.data_arms = [0, -1, 0, 0, -1, 0, 0]        self.data_flag = True        print('arm turn left')    def _button_arm_turn_right(self):        self.data_arms = [0, 1, 0, 0, 1, 0, 0]        self.data_flag = True        print('arm turn right')    # def button_arm_updown(self, *args):    #     print(args[0])    #    def _button_arm_stop(self):        print('arm stop')    # =============================================================================    #  auto navigation interface    def move_target(self, *args):        print(args[0]["x"], args[0]["y"])    # =============================================================================    #  command line interface    def execute_cmd(self, *args):        command = args[0]        print('command: ' + command)        if command == "ui vision start":            self.camera_on_ui()        elif command == "vision start":            self.camera_on_ui_local()        elif command == "vision end":            self.camera_off()        elif command == "local vision start":            self.camera_on_local()        print "data_control: ", self.data_control    # =============================================================================    # camera interface    def cam_control(self, *args):        self.camControl[args[0]]()    def _ui_vision_on(self):        self.camera_on_ui()        print('Local Camera ON')    def _cam_off(self):        self.camera_off()        print('Camera OFF')    def aud_control(self, *args):        self.audControl[args[0]]()    def _aud_on_web(self):        self.voice_on_web()        print('Audio ON Web')    def _aud_on_local(self):        self.voice_on_local()        print('Audio ON Local')    def _aud_off(self):        self.voice_off()        print('Audio OFF')    def start_ui_system(self, *args):        server_in = args[0]        port_in = args[1]        socketIO = SocketIO(server_in, port_in, lognamespace)        socketIO.on('cam', self.cam_control)        socketIO.on('armXY', self.arm_control)        socketIO.on('armZ', self.arm_control_z)        socketIO.on('armBI', self.arm_built_in)        socketIO.on('move', self.on_move)        socketIO.on('stop', self.button_stop)        socketIO.on('movtarget', self.move_target)        socketIO.on('botcmd', self.execute_cmd)        socketIO.on('aud', self.aud_control)        socketIO.on('record', self.record_control)        socketIO.wait()if __name__ == '__main__':    robot_ui = RobotControl()    server = 'localhost'    port = 28426    # server = '123.57.176.245'    # port = 80    #    socketIO_test = SocketIO(server, port, lognamespace)    socketIO_test.on('armXY', robot_ui.arm_control)    socketIO_test.on('armZ', robot_ui.arm_control_z)    socketIO_test.on('cam', robot_ui.cam_control)    socketIO_test.on('armBI', robot_ui.arm_built_in)    def socket_on_move (msg):        robot_ui.on_move(msg)    socketIO_test.on('move', socket_on_move)    # socketIO_test.on('move', robot_ui.on_move)    socketIO_test.on('stop', robot_ui.button_stop)    socketIO_test.on('movtarget', robot_ui.move_target)    socketIO_test.on('botcmd', robot_ui.execute_cmd)    socketIO_test.on('aud', robot_ui.aud_control)    socketIO_test.on('record', robot_ui.record_control)    socketIO_test.on('Music', robot_ui.Music_control)    socketIO_test.on('reset', robot_ui.reset_control)    socketIO_test.on('Hand', robot_ui.hand_control)    socketIO_test.on('name', robot_ui.name_control)    socketIO_test.wait()