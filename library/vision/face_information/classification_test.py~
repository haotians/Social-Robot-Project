__author__ = 'haotianshi'
import numpy as np
import matplotlib.pyplot as plt
# # %matplotlib inline

print "lol"
# Make sure that caffe is on the python path:
caffe_root = '/home/haotians/Documents/caffe/'  # this file is expected to be in {caffe_root}/examples
import sys, os
sys.path.insert(0, caffe_root + 'python')
#
print sys.path
import caffe
import time
import cv2

def classification_test():
    plt.rcParams['figure.figsize'] = (10, 10)
    plt.rcParams['image.interpolation'] = 'nearest'
    plt.rcParams['image.cmap'] = 'gray'

    caffe.set_mode_cpu()
    # load model
    # net = caffe.Net(caffe_root + 'models/bvlc_reference_caffenet/deploy.prototxt',
    #                 caffe_root + 'models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel',
    #                 caffe.TEST)

    net = caffe.Net(caffe_root + 'models/test_model/deploy.prototxt',
                    caffe_root + 'models/test_model/nin_imagenet_conv.caffemodel',
                    caffe.TEST)

    # # input preprocessing: 'data' is the name of the input blob == net.inputs[0]
    transformer = caffe.io.Transformer({'data': net.blobs['data'].data.shape})
    transformer.set_transpose('data', (2,0,1))
    transformer.set_mean('data', np.load(caffe_root + 'python/caffe/imagenet/ilsvrc_2012_mean.npy').mean(1).mean(1)) # mean pixel
    transformer.set_raw_scale('data', 255)  # the reference model operates on images in [0,255] range instead of [0,1]
    transformer.set_channel_swap('data', (2,1,0))  # the reference model has channels in BGR order instead of RGB
    #
    # set net to batch size of 50
    input_size = 1
    net.blobs['data'].reshape(input_size, 3, 227, 227)

    path = caffe_root + 'examples/images/paper.jpg'

    net.blobs['data'].data[...] = transformer.preprocess('data', caffe.io.load_image(path))
    timer1 = time.time()
    out = net.forward()
    timer2 = time.time()
    print out
    print("Predicted class is #{}.".format(out['pool4'][0].argmax()))

    # load labels
    imagenet_labels_filename = caffe_root + 'data/ilsvrc12/synset_words.txt'
    try:
        labels = np.loadtxt(imagenet_labels_filename, str, delimiter='\t')
    except:
        # !../data/ilsvrc12/get_ilsvrc_aux.sh
        labels = np.loadtxt(imagenet_labels_filename, str, delimiter='\t')

    # sort top k predictions from softmax output
    top_k = net.blobs['pool4'].data[0].flatten().argsort()[-1:-6:-1]
    print net.blobs['pool4'].data[0]
    print top_k
    print "result: "
    print "time cost: ",timer2 - timer1
    for i in range(5):
        print labels[top_k[i]]

    # plt.imshow(transformer.deprocess('data', net.blobs['data'].data[0]))
    import cv2
    img = cv2.imread(path)
    cv2.imshow("target",img)
    print "fini"

def emotion_test():
    plt.rcParams['figure.figsize'] = (10, 10)
    plt.rcParams['image.interpolation'] = 'nearest'
    plt.rcParams['image.cmap'] = 'gray'


    DEMO_DIR = '.'

    categories = [ 'Angry' , 'Disgust' , 'Fear' , 'Happy'  , 'Neutral' ,  'Sad' , 'Surprise']

    categories = [ 'Angry' , 'Sad' , 'Sad' , 'Happy'  , 'Neutral' ,  'Sad' , 'Surprise']

    cur_net_dir = 'VGG_S_rgb'

    mean_filename= os.path.join(DEMO_DIR,cur_net_dir,'mean.binaryproto')
    proto_data = open(mean_filename, "rb").read()
    a = caffe.io.caffe_pb2.BlobProto.FromString(proto_data)
    mean  = caffe.io.blobproto_to_array(a)[0]
    print mean

    net_pretrained = os.path.join(DEMO_DIR,cur_net_dir,'EmotiW_VGG_S.caffemodel')
    net_model_file = os.path.join(DEMO_DIR,cur_net_dir,'deploy.prototxt')

    VGG_S_Net = caffe.Classifier(net_model_file, net_pretrained,
                           mean=None,
                           channel_swap=None,
                           raw_scale=None,
                           image_dims=None)

    # VGG_S_Net = caffe.Net(net_model_file, net_model_file, caffe.TEST)

    transformer = caffe.io.Transformer({'data': VGG_S_Net.blobs['data'].data.shape})
    transformer.set_transpose('data', (2,0,1))
    transformer.set_mean('data', mean) # mean pixel
    # transformer.set_raw_scale('data', 255)  # the reference model operates on images in [0,255] range instead of [0,1]
    # transformer.set_channel_swap('data', (2,1,0))  # the reference model has channels in BGR order instead of RGB
    name = 'test16.jpg'
    # input_image = caffe.io.load_image(os.path.join(DEMO_DIR, cur_net_dir, name))
    # set net to batch size of 1
    input_image = cv2.imread(name)
    print input_image
    VGG_S_Net.blobs['data'].reshape(1, 3, 256, 256)

    VGG_S_Net.blobs['data'].data[...] = transformer.preprocess('data', input_image)
    out = VGG_S_Net.forward()
    print out['prob'][0]

    print("Predicted class is #{}.".format(out['prob'][0]))

    print 'predicted category is {0}'.format(categories[out['prob'][0].argmax()])



def showimage(im):
    if im.ndim == 3:
        im = im[:, :, ::-1]
    plt.set_cmap('jet')
    plt.imshow(im,vmin=0, vmax=0.2)


def vis_square(data, padsize=1, padval=0):
    data -= data.min()
    data /= data.max()

    # force the number of filters to be square
    n = int(np.ceil(np.sqrt(data.shape[0])))
    padding = ((0, n ** 2 - data.shape[0]), (0, padsize), (0, padsize)) + ((0, 0),) * (data.ndim - 3)
    data = np.pad(data, padding, mode='constant', constant_values=(padval, padval))

    # tile the filters into an image
    data = data.reshape((n, n) + data.shape[1:]).transpose((0, 2, 1, 3) + tuple(range(4, data.ndim + 1)))
    data = data.reshape((n * data.shape[1], n * data.shape[3]) + data.shape[4:])

    showimage(data)

# classification_test()
emotion_test()
